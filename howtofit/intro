Welcome to HowToFit - The PyAutoFit tutorial!

### JUYPTER NOTEBOOKS ###

The majority of these tutorials are supplied as Juypter Notebooks, which come with a '.ipynb' suffix. For those new to
Python, Juypter Notebooks are a different way to write, view and use Python code. Compared to the traditional Python
scripts, they allow:

- Small blocks of code to be viewed and run at a time
- Images and visualization from a code to be displayed directly underneath it.
- Text script to appear between the blocks of code.

This makes them an ideal way for us to present the HowToFit lecture series, therefore I recommend you get yourself
a Juypter notebook viewer (https://jupyter.org/) if you havent done so already.

If you *really* want to use Python scripts, all tutorials are supplied a .py python files in the 'scripts' folder of
each chapter.

For actual PyAutoFit use I recommend you use Python scripts. Therefore, as you go through the lecture series you will 
notice that we will transition you to Python scripts.

### VISUALIZATION ###

To perform these tutorials we are going to use the library PyAutoArray. This extends the NumPy libraries to create
Python objects representing data, with in-built tools that specialize in visualization.

Before beginning the HowToFit lecture series you should do 'tutorial_0_visualization'. This will take you through how 
PyAutoArray interfaces with matplotlib to perform visualization and will get you setup such that images and figures 
display properly in your Jupyter notebooks.

### CODE STYLE AND FORMATTING ###

When you begin the notebooks, you may notice the style and formatting of our Python code looks different to what you
are used to. For example, it is common for brackets to be placed on their own line at the end of function calls,
the inputs of a function or class may be listed over many separate lines and the code in general takes up a lot more
space then you are used to.

This is intentional, because we believe it makes the cleanest, most readable code possible. In fact - lots of people do, 
which is why we use an auto-formatter to produce the code in a standardized format. If you're interested in the style 
and would like to adapt it to your own code, check out the Python auto-code formatter 'black'.

https://github.com/python/black

### BUG WITH CONFIG FILE ###

If, when running the first notebook, you get an error related to config files. For example, it may state that the
label 'numba' could not be found in a config file, or something else related to configs, this means that you have
not set up your WORKSPACE path correctly to point to the folder autofit_workspace/config. To fix this, you can
manually add the config path to each notebook, using the following code:

import autofit as af

workspace_path = "/path/to/user/autofit_workspace/"

conf.instance = conf.Config(
    config_path=f"{workspace_path}/config/",
    output_path=f"{workspace_path}/output/",
)

### HOW TO TACKLE HOWTOFIT ###

The HowToFit lecture series current sits at 5 tutorials, which will take a day or two to go through properly.

### OVERVIEW OF CHAPTER 1 - Model Fiting with PyAutoFit ###

In chapter 1, we'll learn about model fitting and PyAutoFit. At the end, you'll be able to:

1) Write a model component in PyAutoFit.
2) Fit this model to data using a non-linear search algoritthm.
3) Build and customize highly complex models with PyAutoFit.